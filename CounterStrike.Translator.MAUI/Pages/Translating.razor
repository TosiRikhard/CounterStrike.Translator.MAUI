@page "/"
@using Microsoft.Extensions.Configuration
@using CounterStrike.Translator.MAUI.Models
@using CounterStrike.Translator.MAUI.Services
@using System.Text.RegularExpressions
@using CounterStrike.Translator.MAUI.Helpers
@using System.Collections.Concurrent
@inject IConfiguration Configuration
@inject AppSettingsAndStateService AppSettingsAndStateService
@inject NavigationManager NavigationManager
@inject TelnetService TelnetService
@inject TranslatingService TranslatingService
@inject TelnetConnection TelnetConnection

<div class="container-fluid">
    <div class="row">
        <div class="col-8">
            <!-- Headers -->
            <div class="row">
                <div class="col-2 text-truncate" style="max-width: 100px; font-weight: bold;">
                    Sender
                </div>
                <div class="col-1" style="font-weight: bold;">
                    From
                </div>
                <div class="col-1" style="font-weight: bold;">
                    To
                </div>
                <div class="col" style="font-weight: bold;">
                    Message
                </div>
            </div>
            <!-- Content -->
            @foreach (var message in _translatedMessages)
            {
                <div class="row">
                    <div class="col-2 text-truncate text-success" style="max-width: 100px;">
                        @((message.UserName.Length > 10) ? message.UserName[..10] + "..." : message.UserName)
                    </div>
                    <div class="col-1 text-info">
                        @message.TranslatedLanguageCode
                    </div>
                    <div class="col-1 text-warning">
                        @message.SourceLanguageCode
                    </div>
                    <div class="col">
                        @message.TranslatedText
                    </div>
                </div>
            }
        </div>

        @if (_appSettings is not null)
        {
            <div class="col-4" style="border: 2px solid #108BEA; padding: 10px;">
                <div class="form-group mb-3">
                    <InputText class="form-control" @bind-Value="IgnoreProfilesText" />
                    <label>Don't Translate messages from profile names above</label>
                </div>

                <div class="form-group">
                    <label>Only translate all chat</label>
                    <input type="checkbox" @bind="_appSettings.TranslatingOptions.TranslateOnlyAllChat">
                </div>

                <div class="form-group mb-3">
                    <label>Send translations to team chat</label>
                    <input type="checkbox" @bind="_appSettings.TranslatingOptions.SendTranslationToTeamChat">
                </div>

                <div class="form-group mb-3">
                    <label>Default translating language</label>
                    <InputText class="form-control" @bind-Value="_appSettings.TranslatingOptions.LanguageToTranslateTo" />
                </div>

                <div class="form-group mb-3">
                    <label>Don't translate Languages (separate by comma)</label>
                    <InputTextArea class="form-control" @bind-Value="IgnoreLanguagesText" />
                </div>



                <button class="btn btn-primary mb-3" @onclick="SaveSettings">Save Changes</button>

                <div>
                    <label style="border: 2px solid #FFA500; padding: 10px;">TelnetConnection: @AppSettingsAndStateService.TelnetConnected</label>
                    <label style="border: 2px solid #FFA500; padding: 10px;">Current Translating Engine: @AppSettingsAndStateService.CurrentTranslationEngine</label>
                    <label style="border: 2px solid #FFA500; padding: 10px;">Engine Api limit: @AppSettingsAndStateService.CurrentApiCalls/@AppSettingsAndStateService.CurrentApiMaxCalls</label>
                    <label style="border: 2px solid #FFA500; padding: 10px;">Last Language: @_lastTranslatedLanguage</label>
                </div>

            </div>
        }


    </div>
</div>

@code {

    private AppSettings _appSettings;
    private ConcurrentQueue<Translation> _translatedMessages = new();
    private Translation _lastTranslatedMessage;
    private string _lastTranslatedLanguage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _appSettings = AppSettingsAndStateService.GetSettings();

        if (_appSettings.IsFirstRun || _appSettings.ShowUserConfiguratorAtStartup && !AppSettingsAndStateService.UserConfiguratorShown)
        {
            // Update first run flag to false
            await SaveFirstRun(_appSettings);

            // Navigate to SteamProfiles page
            NavigationManager.NavigateTo("/steamprofiles");
        }

        TelnetService.TelnetConnection.MessageReceived += async (message) => await OnMessageReceived(message);

        // Subscribe to ConnectionEstablished event
        TelnetService.TelnetConnection.ConnectionEstablished += () => InvokeAsync(StateHasChanged);
    }


    private async Task OnMessageReceived(string message)
    {
        try
        {
            var messageParts = GetValidMessageParts(message);
            if (messageParts == null) return; // Not a valid message to translate

            var messageObject = new Message
                {
                    Sender = ProcessSenderName(messageParts[0]),
                };

            ParseMessageParameters(message, messageObject);

            if (!messageObject.ValidMessage)
            {
                // TODO THIS SEEM TO CRASH THREAD
             //   await Application.Current!.MainPage!.DisplayAlert("Error in translation", "No valid language code provided", "OK");
                return;
            }

            // If the message was not a command, and the sender is the user do not translate
            if (messageObject.CommandType == string.Empty && messageObject.SenderIsUser) return;

            // If source chat type is team check translate only all chat option
            if (messageObject.SourceChatType == TelnetService.ChatType.Team && _appSettings.TranslatingOptions.TranslateOnlyAllChat) return;

            // If the message is not from the user, but is a command, then do not translate
            if (!messageObject.SenderIsUser && messageObject.CommandType != string.Empty) return;

            // If the message is not a command, and the profile is ignored, then do not translate
            if (_appSettings.TranslatingOptions.IgnoreProfiles.Contains(messageObject.Sender) && messageObject.CommandType == string.Empty) return;

            // Get the message
            Translation messageTranslated;


            if (messageObject.LanguageParameter != string.Empty)
            {
                messageTranslated = await TranslatingService.TranslateMessage(messageObject.MessageText, messageObject.LanguageParameter);
            }
            else
            {
                messageTranslated = await TranslatingService.TranslateMessage(messageObject.MessageText, _appSettings.TranslatingOptions.LanguageToTranslateTo);
            }

            if (string.IsNullOrEmpty(messageTranslated.TranslatedText)) return;

            // If the source language is ignored return
            if (messageObject.CommandType == string.Empty && _appSettings.TranslatingOptions.IgnoreLanguages.Contains(messageTranslated.TranslatedLanguageCode)) return;

            if (messageObject.DestinationChatType == TelnetService.ChatType.None)
            {
                if (_appSettings.TranslatingOptions.SendTranslationToTeamChat)
                {
                    var shortName = messageObject.Sender.Substring(0, 6) + ": ";
                    await TelnetService.SendInChat(TelnetService.ChatType.Team, shortName + messageTranslated.TranslatedText);
                }
            }
            else
            {
                await TelnetService.SendInChat(messageObject.DestinationChatType, messageTranslated.TranslatedText);
            }
            
            await InvokeAsync(() =>
            {
                messageTranslated.UserName = messageObject.Sender;

                if (!messageObject.SenderIsUser)
                {
                    _lastTranslatedLanguage = messageTranslated.TranslatedLanguageCode;
                }

                _translatedMessages.Enqueue(messageTranslated);
                _lastTranslatedMessage = messageTranslated;

                // If the list is longer than 10, remove the first item
                while (_translatedMessages.Count > 20)
                {
                    _translatedMessages.TryDequeue(out _);
                }
                StateHasChanged();  // Update the UI on the main thread
            });

        }
        catch (Exception ex)
        {
           // await Application.Current!.MainPage!.DisplayAlert("Error in translation", ex.Message, "OK");
        }
    }

    private void ParseMessageParameters(string message, Message messageObject)
    {

        /*The message can be in a few different formats:

        1. Incoming message from a player: This is just a simple chat, no commands or parameters here
        2. Incoming message from own user, with a command: !tr language code (Optional: ChatDestination) message
        3. Incoming message from own user, with a command: !trl (Optional: ChatDestination) message

        !tr = translate command to a specific language
        !trl = translate command to the last used language
        */

        var messageObjectPatterns = new List<string>
        {
            "^Tried to look up command say as if it were a variable.\r\n",
            "^Tried to look up command say_team as if it were a variable.\r\n",
            @"^\*\s*(.*?)\s*\*", // Matches anything inside asterisks like *DEAD*
            @"^\s*\(\s*Terrorist\s*\)\s*",
            @"^\s*\(\s*Counter-Terrorist\s*\)\s*",
            @"^\s*\(\s*Spectator\s*\)\s*",
            @".* :\s*", // Matches anything before the last occurance of " : "
            "^!trl ",
            "^!tr ",
            @"[\p{C}]+" // this is always removed
        };

        for (var index = 0; index < messageObjectPatterns.Count; index++)
        {
            var pattern = messageObjectPatterns[index];
            // Check for regex match against pattern
            var match = Regex.Match(message, pattern);
            if (match.Success){
                switch (index)
                {
                    case 0:
                        {
                            messageObject.SenderIsUser = true;
                            messageObject.SourceChatType = TelnetService.ChatType.All;
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 1:
                        {
                            messageObject.SenderIsUser = true;
                            messageObject.SourceChatType = TelnetService.ChatType.Team;
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 2:
                        {
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 3:
                        {
                            messageObject.SourceChatType = TelnetService.ChatType.Team;
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 4:
                        {
                            messageObject.SourceChatType = TelnetService.ChatType.Team;
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 5:
                        {
                            messageObject.SourceChatType = TelnetService.ChatType.All;
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 6:
                        {
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                    case 7:
                        {
                            messageObject.CommandType = "!trl";
                            messageObject.LanguageParameter = _lastTranslatedLanguage;
                            message = Regex.Replace(message, pattern, "");
                            var splitMessage = message.Split(" ");
                            var chatDestination = splitMessage[0].ToLower();
                            if (chatDestination.StartsWith("!teamchat"))
                            {
                                messageObject.DestinationChatType = TelnetService.ChatType.Team;
                                message = message.Replace("!teamchat ", "");
                            }
                            else if (chatDestination.StartsWith("!allchat"))
                            {
                                messageObject.DestinationChatType = TelnetService.ChatType.All;
                                message = message.Replace("!allchat ", "");
                            }
                            else
                            {
                                messageObject.DestinationChatType = messageObject.SourceChatType;
                            }
                            break;
                        }
                    case 8:
                        {
                            messageObject.CommandType = "!tr";
                            message = Regex.Replace(message, pattern, "");

                            var splitMessage = message.Split(" ");
                            var languageCode = splitMessage[0];
                            if (!LanguageCodeHelper.IsLanguageCodeValid(languageCode))
                            {
                                messageObject.ValidMessage = false;
                                return;
                            }
                            messageObject.LanguageParameter = languageCode;
                            message = message.Replace(languageCode + " ", "");
                            var chatDestination = splitMessage[1].ToLower();
                            if (chatDestination.StartsWith("!teamchat"))
                            {
                                messageObject.DestinationChatType = TelnetService.ChatType.Team;
                                message = message.Replace("!teamchat ", "");
                            }
                            else if (chatDestination.StartsWith("!allchat"))
                            {
                                messageObject.DestinationChatType = TelnetService.ChatType.All;
                                message = message.Replace("!allchat ", "");
                            }
                            else
                            {
                                messageObject.DestinationChatType = messageObject.SourceChatType;
                            }
                            break;
                        }
                    case 9:
                        {
                            message = Regex.Replace(message, pattern, "");
                            break;
                        }
                }
            }
        }
        messageObject.MessageText = message.Trim();
    }

    private static string ProcessSenderName(string message)
    {
        var senderName = message.Split(" : ")[0];

        // Define the patterns to be removed
        var patternsToRemove = new List<string>
        {
            @"[\p{C}]+", // Matches last empty char that telnet brings
            @"\*\s*(.*?)\s*\*", // Matches anything inside asterisks like *DEAD*
            "Tried to look up command say as if it were a variable.",
            "Tried to look up command say_team as if it were a variable.",
            @"\s*@.*$", // Matches " @ ANY TEXT HERE" that comes after the first @. Like Username @AStairs "message"
            @"\s*\(\s*Terrorist\s*\)\s*",
            @"\s*\(\s*Counter-Terrorist\s*\)\s*",
            @"\s*\(\s*Spectator\s*\)\s*",
        };

        // Remove each pattern from the sender name
        foreach (var pattern in patternsToRemove)
        {
            senderName = Regex.Replace(senderName, pattern, string.Empty);
        }

        return senderName.Trim();
    }

    private string[] GetValidMessageParts(string message)
    {
        const int minimumMessageLength = 2;
        const string requiredSubstring = " : ";

        if (string.IsNullOrEmpty(message)) return null;
        if (message.Length <= minimumMessageLength) return null;
        if (!message.Contains(requiredSubstring)) return null;

        var messageSplit = message.Split(requiredSubstring);

        if (_lastTranslatedMessage != null && messageSplit[1] == _lastTranslatedMessage.TranslatedText)
        {
            return null;
        }
        
        return messageSplit;
    }

    private async Task SaveFirstRun(AppSettings settings)
    {
        settings.IsFirstRun = false;
        AppSettingsAndStateService.UserConfiguratorShown = true;
        await AppSettingsAndStateService.SaveSettings(settings);
    }

    private async Task SaveSettings()
    {
        // Trim values
        _appSettings.TranslatingOptions.IgnoreProfiles = _appSettings.TranslatingOptions.IgnoreProfiles.Select(s => s.Trim()).ToList();


        // If language translate to is null or empty, add default value of English
        if (string.IsNullOrEmpty(_appSettings.TranslatingOptions.LanguageToTranslateTo))
        {
            _appSettings.TranslatingOptions.LanguageToTranslateTo = "en";
        }

        _appSettings.TranslatingOptions.LanguageToTranslateTo = _appSettings.TranslatingOptions.LanguageToTranslateTo.Trim();

        // if Ignorlanguages is empty, add the LanguageTranslateTo to the list
        if (_appSettings.TranslatingOptions.IgnoreLanguages is null || _appSettings.TranslatingOptions.IgnoreLanguages.Count == 0)
        {
            _appSettings.TranslatingOptions.IgnoreLanguages = new List<string> { _appSettings.TranslatingOptions.LanguageToTranslateTo };
        }


        _appSettings.TranslatingOptions.IgnoreLanguages = _appSettings.TranslatingOptions.IgnoreLanguages.Select(s => s.Trim()).ToList();



        await AppSettingsAndStateService.SaveSettings(_appSettings);
    }

    private string IgnoreLanguagesText
    {
        get
        {
            if (_appSettings.TranslatingOptions.IgnoreLanguages is null || _appSettings.TranslatingOptions.IgnoreLanguages.Count == 0) return string.Empty;
            return string.Join(", ", _appSettings.TranslatingOptions.IgnoreLanguages);
        }
        set
        {
            _appSettings.TranslatingOptions.IgnoreLanguages = value.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .ToList();
        }
    }

    private string IgnoreProfilesText
    {
        get
        {
            if (_appSettings.TranslatingOptions.IgnoreProfiles is null || _appSettings.TranslatingOptions.IgnoreProfiles.Count == 0) return string.Empty;
            return string.Join(", ", _appSettings.TranslatingOptions.IgnoreProfiles);
        }
        set
        {
            _appSettings.TranslatingOptions.IgnoreProfiles = value.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .ToList();
        }
    }

}